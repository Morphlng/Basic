// ------------基本语法------------
// 自上向下，优先级逐渐增高

statements	: NEWLINE* statement (NEWLINE + statement)* NEWLINE*

statement	: KEYWORD:RETURN expr?
			: KEYWORD:CONTINUE
			: KEYWORD:BREAK
			: expr

expr	: KEYWORD:VAR IDENTIFIER (LSQUARE expr RSQUARE)* EQ expr
		: comp_expr ((KEYWORD:AND|KEYWORD:OR) comp_expr)*
		
comp-expr	: KEYWORD:NOT comp-expr
			: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith_expr	: term ((PLUS|MINUS) term)*

term	: factor ((MUL|DIV) factor)*

factor	: (PLUS|MINUS) factor
	    : power

power	: call (POW factor)*

call	: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?
		: atom (LSQUARE expr RSQUARE)*

atom	: INT|FLOAT|STRING|IDENTIFIER
	    : LPAREN expr RPAREN
		: list-expr
		: if-expr
		: for-expr
		: while-expr
		: func-def

list-expr : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr : KEYWORD:IF expr KEYWORD:THEN
		  (statement NEWLINE* (if-expr-b|if-expr-c)?)	// elif(b) or else(c)
		  | (COLON statements KEYWORD:END|if-expr-b|if-expr-b)

(if-expr-b)
elif-expr	: KEYWORD:ELIF expr KEYWORD:THEN
		      (statement NEWLINE* (if-expr-b|if-expr-c)?)	// elif(b) or else(c)
		      | (COLON statements KEYWORD:END|if-expr-b|if-expr-b)

(if-expr-c)
else-expr	: KEYWORD:ELSE
			  statement NEWLINE*
			  | (COLON statements KEYWORD:END)

for-expr	: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
			  (KEYWORD:STEP expr)? KEYWORD:THEN
			  statement
			  | (COLON statements KEYWORD:END)

while-expr	: KEYWORD:WHILE expr KEYWORD:THEN
			  statement 
			  | (COLON statements KEYWORD:END)

func-def	: KEYWORD:FUNC (IDENTIFIER)? 
			  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
			  (ARROW statement)
			  | (COLON statements KEYWORD:END)

// ------------变量------------

VAR			variable_name	=	<expr>
 ^                ^			^
KEYWORD		  IDENTIFIER   EQUALS

// ------------判断语句------------

IF 5==5 THEN do sth ELSE do sth

// ------------循环语句------------

FOR <var_name> = <start_value> TO <end_value> (STEP <step_length>)? THEN <expr>

e.g. FOR i=1 TO 10 THEN VAR result = result + i

目前设计为双闭合，即(1+2+3+...+10)，可以改为左闭右开。

WHILE <condition> THEN <expr>

// ------------函数------------

定义：
FUNC add(a,b) -> a+b

匿名函数：
FUNC (a,b) -> a*b

调用：
add(1,2)